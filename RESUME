import React, { useState, useEffect, useRef, useCallback, useMemo } from "react";
import { 
  MapPin, Mail, Globe, Linkedin, Phone, Download, Star, ChevronDown, ChevronUp, 
  ExternalLink, User, Briefcase, Award, Code, Languages, Target, Zap, Rocket, 
  Brain, Users, TrendingUp, MessageSquare, Send, MessageCircle, PhoneCall, 
  Calendar, FileText, Eye, Building2, Smartphone, Monitor, TabletSmartphone,
  BarChart3, PieChart, Settings, Database, Lightbulb, Shield, CheckCircle2,
  PlayCircle, DollarSign, UserCheck, Clock, GitBranch, Presentation, Sparkles,
  Command, MousePointer, Layers, Compass, ArrowUpRight, Menu, X, Home, 
  GraduationCap, Cpu, Palette, Heart
} from "lucide-react";

// Custom hooks for better organization
const useScrollProgress = () => {
  const [scrollProgress, setScrollProgress] = useState(0);
  
  useEffect(() => {
    const handleScroll = () => {
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight - windowHeight;
      const scrollTop = window.pageYOffset;
      setScrollProgress((scrollTop / documentHeight) * 100);
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  return scrollProgress;
};

const useActiveSection = () => {
  const [activeSection, setActiveSection] = useState('hero');

  useEffect(() => {
    const handleScroll = () => {
      const sections = ['hero', 'profile', 'achievements', 'experience', 'skills', 'languages', 'contact'];
      const currentSection = sections.find(section => {
        const element = document.getElementById(section);
        if (element) {
          const rect = element.getBoundingClientRect();
          return rect.top <= 150 && rect.bottom >= 150;
        }
        return false;
      });
      if (currentSection) setActiveSection(currentSection);
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  return activeSection;
};

const useMousePosition = () => {
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });

  useEffect(() => {
    const handleMouseMove = (e) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
    };

    window.addEventListener('mousemove', handleMouseMove, { passive: true });
    return () => window.removeEventListener('mousemove', handleMouseMove);
  }, []);

  return mousePosition;
};

// Animation utility functions
const createFloat = (delay = 0, duration = 4) => ({
  y: [0, -20, 0],
  transition: {
    duration,
    delay,
    repeat: Infinity,
    ease: "easeInOut"
  }
});

const createSlideIn = (direction = 'left', delay = 0) => ({
  hidden: { 
    opacity: 0, 
    x: direction === 'left' ? -50 : direction === 'right' ? 50 : 0,
    y: direction === 'up' ? -50 : direction === 'down' ? 50 : 0 
  },
  visible: {
    opacity: 1,
    x: 0,
    y: 0,
    transition: {
      duration: 0.8,
      delay,
      type: "spring",
      stiffness: 100
    }
  }
});

// Enhanced Section Component with Intersection Observer
const AnimatedSection = ({ id, children, className = "", threshold = 0.2 }) => {
  const [isVisible, setIsVisible] = useState(false);
  const ref = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
        }
      },
      { threshold }
    );

    if (ref.current) {
      observer.observe(ref.current);
    }

    return () => {
      if (ref.current) {
        observer.unobserve(ref.current);
      }
    };
  }, [threshold]);

  return (
    <section
      id={id}
      ref={ref}
      className={`${className} transition-all duration-1000 ${
        isVisible ? 'opacity-100 transform translate-y-0' : 'opacity-0 transform translate-y-12'
      }`}
      style={{ transitionDelay: '0.2s' }}
    >
      {children}
    </section>
  );
};

// Enhanced Button Components
const GradientButton = ({ onClick, children, variant = 'primary', size = 'md', className = '', disabled = false, type = 'button', ...props }) => {
  const baseClasses = "font-bold rounded-2xl transition-all duration-300 flex items-center justify-center gap-3 relative overflow-hidden group transform hover:scale-105 hover:-translate-y-1 active:scale-95";
  
  const variants = {
    primary: "bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white shadow-lg hover:shadow-2xl",
    secondary: "bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white shadow-lg hover:shadow-xl",
    success: "bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white shadow-lg hover:shadow-xl",
    outline: "border-2 border-white text-white hover:bg-white hover:text-gray-900 bg-transparent"
  };
  
  const sizes = {
    sm: "px-4 py-2 text-sm",
    md: "px-6 py-3 text-base",
    lg: "px-8 py-4 text-lg",
    xl: "px-10 py-5 text-xl"
  };

  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={`${baseClasses} ${variants[variant]} ${sizes[size]} ${className} ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}
      {...props}
    >
      <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover:translate-x-full transition-transform duration-700" />
      <span className="relative z-10">{children}</span>
    </button>
  );
};

// Loading Animation Component
const LoadingSpinner = () => (
  <div className="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin" />
);

// Floating Particles Component
const FloatingParticles = ({ count = 15 }) => (
  <div className="absolute inset-0 overflow-hidden pointer-events-none">
    {Array.from({ length: count }).map((_, i) => (
      <div
        key={i}
        className="absolute w-2 h-2 bg-gradient-to-br from-blue-400/30 to-purple-400/30 rounded-full"
        style={{
          left: `${Math.random() * 100}%`,
          top: `${Math.random() * 100}%`,
          animation: `float ${3 + Math.random() * 4}s ease-in-out infinite`,
          animationDelay: `${Math.random() * 2}s`
        }}
      />
    ))}
    <style jsx>{`
      @keyframes float {
        0%, 100% { transform: translateY(0px) rotate(0deg); opacity: 0; }
        50% { transform: translateY(-20px) rotate(180deg); opacity: 1; }
      }
    `}</style>
  </div>
);

// Enhanced Mouse Follower
const MouseFollower = ({ mousePosition }) => {
  if (typeof window === 'undefined' || window.innerWidth <= 768) return null;

  return (
    <>
      <div
        className="fixed w-6 h-6 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full pointer-events-none z-50 mix-blend-screen transition-transform duration-100 ease-out"
        style={{
          left: mousePosition.x - 12,
          top: mousePosition.y - 12,
          transform: `translate(${mousePosition.x - 12}px, ${mousePosition.y - 12}px)`
        }}
      />
      <div
        className="fixed w-1 h-1 bg-white rounded-full pointer-events-none z-50 transition-transform duration-75 ease-out"
        style={{
          left: mousePosition.x - 2,
          top: mousePosition.y - 2,
          transform: `translate(${mousePosition.x - 2}px, ${mousePosition.y - 2}px)`
        }}
      />
    </>
  );
};

// Main Resume Component
export default function EnhancedResume() {
  // State management
  const [expandedSections, setExpandedSections] = useState({
    experience: true,
    skills: false,
    projects: false,
    achievements: false
  });
  
  const [showContactForm, setShowContactForm] = useState(false);
  const [contactForm, setContactForm] = useState({ 
    name: '', email: '', phone: '', message: '', company: '' 
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitSuccess, setSubmitSuccess] = useState(false);
  const [formError, setFormError] = useState('');
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  // Custom hooks
  const scrollProgress = useScrollProgress();
  const activeSection = useActiveSection();
  const mousePosition = useMousePosition();

  // Data
  const experiences = useMemo(() => [
    {
      title: "מייסד ומוביל שיווק מוצר",
      company: "AskAvi.co.il",
      period: "2024 – היום",
      description: "השקתי מהיסוד עוזר AI אישי להורים ישראלים. המוצר משמש אלפי משתמשים פעילים ומהווה פתרון חדשני בתחום ההורות הדיגיטלית.",
      achievements: [
        "פיתוח צ'אטבוט חכם בעברית מבוסס GPT ו-Realtime API",
        "בניית גישה חינוכית ייחודית: 'חינוך עצמאי ומאוזן™'",
        "פיתוח מודל עסקי Freemium + Premium (69₪/חודש) עם אלפי משתמשים",
        "בניית מוצר MVP מקצה לקצה: Frontend React, Backend Deno",
        "הטמעת מערכת CRM מלאה עם דיוור אוטומטי ותזכורות",
        "יצירת קמפיינים שיווקיים: SEO, השקות, פרסום ממומן",
        "הצגת המיזם בפני משקיעים כולל 'שארק טנק'"
      ],
      color: "from-blue-500 via-indigo-500 to-purple-600",
      icon: <Rocket className="w-6 h-6" />,
      tags: ["AI Product", "SaaS", "MVP Development", "Go-To-Market"],
      metrics: { users: "אלפי משתמשים", revenue: "69₪/חודש", growth: "+300%" }
    },
    {
      title: "מנהל פעילות שיווקית ותמריצים",
      company: "Samsung Israel - חטיבת המובייל",
      period: "2014 – 2023 (9 שנים)",
      description: "שימשתי כנציג סמסונג הבלעדי מול ערוצי המכירה והמפיצים. אחראי על חיבור בין חברת האם הגלובלית לבין השטח המקומי.",
      achievements: [
        "מעקב מתמיד אחר יעדי מכירה ברמת שוק, רשת וחנות",
        "תכנון ובקרה על תמריצים רבעוניים לאנשי מכירות (FSM)",
        "ניהול תמריצים ומבצעים ייעודיים לרשתות חנויות",
        "בניית מערכות תמריצים המניעות KPIs תוך הקפדה על ROI",
        "יישום אסטרטגיות חוויית לקוח (CX) ברמת רצפת מכירה",
        "הדרכות שוטפות לצוותי החנויות על מוצרים חדשים",
        "ניהול תקציבי MDF בשיתוף עם רשתות קמעונאיות"
      ],
      color: "from-gray-500 via-slate-600 to-gray-700",
      icon: <Smartphone className="w-6 h-6" />,
      tags: ["Channel Marketing", "B2B Sales", "Training", "Market Analysis"],
      metrics: { revenue: "₪100M+", training: "300+ מוכשרים", years: "9 שנים" }
    },
    {
      title: "מייסד ומנהל מותג",
      company: "PITTIE CHOY - מותג אופנה עצמאי",
      period: "2023 – היום",
      description: "מותג אופנה ייחודי שמטרתו לשנות את התדמית של כלבי פיטבול באמצעות עיצוב, אופנה ותוכן חברתי מעצים.",
      achievements: [
        "הקמה וניהול מותג עצמאי מרעיון ועד חנות אונליין פעילה",
        "בניית זהות מותגית ייחודית ושפה ויזואלית",
        "פיתוח קו מוצרים: ביגוד, אקססוריז, אמנות קיר",
        "הפעלת מערכת Print-on-Demand וחנות E-commerce",
        "הובלת קמפיינים ברשתות חברתיות - אורגני וממומן",
        "בניית קהילה מעורבת סביב המסר החברתי"
      ],
      color: "from-purple-500 via-pink-500 to-rose-500",
      icon: <Heart className="w-6 h-6" />,
      tags: ["Brand Development", "E-commerce", "Social Impact"],
      metrics: { brand: "מותג עצמאי", products: "5+ מוצרים", community: "קהילה פעילה" }
    }
  ], []);

  const skills = useMemo(() => [
    { 
      category: "Product Marketing & Strategy", 
      items: [
        "Go-To-Market Strategy", "Product Positioning", "Messaging Framework", 
        "Competitive Analysis", "Market Research", "User Experience Writing",
        "Landing Page Optimization", "Conversion Rate Optimization", "Channel Strategy"
      ],
      color: "from-blue-500 to-cyan-500",
      icon: <Target className="w-6 h-6" />
    },
    { 
      category: "AI & Technology", 
      items: [
        "OpenAI API", "Claude (Anthropic)", "GPT Integration", "Midjourney",
        "AI Product Development", "Base44 Platform", "No-Code Solutions",
        "SaaS Architecture", "MVP Development", "Product Analytics"
      ],
      color: "from-purple-500 to-pink-500",
      icon: <Brain className="w-6 h-6" />
    },
    { 
      category: "Digital Marketing", 
      items: [
        "SEO Strategy", "Content Marketing", "Social Media Marketing",
        "Google Analytics", "Facebook Ads", "A/B Testing", "Email Marketing",
        "Marketing Automation", "Community Building", "Campaign Management"
      ],
      color: "from-green-500 to-emerald-500",
      icon: <TrendingUp className="w-6 h-6" />
    },
    { 
      category: "Business & Sales Development", 
      items: [
        "Channel Management", "Partnership Development", "B2B Sales",
        "Vendor Relations", "Stakeholder Management", "Budget Management",
        "Performance Analytics", "Team Training & Development"
      ],
      color: "from-orange-500 to-red-500",
      icon: <Building2 className="w-6 h-6" />
    }
  ], []);

  const achievements = useMemo(() => [
    {
      title: "השקת AskAvi מוצלחת",
      metric: "אלפי משתמשים פעילים",
      description: "הובלתי מקצה לקצה את פיתוח והשקת פלטפורמת AI חדשנית להורים",
      icon: <Rocket className="w-8 h-8" />,
      gradient: "from-blue-400 to-cyan-400",
      stats: ["1000+ משתמשים", "69₪ ARR", "85% retention"]
    },
    {
      title: "9 שנים של הצלחה בסמסונג",
      metric: "מאות מיליוני ₪ במכירות",
      description: "השגתי יעדי מכירות באופן עקבי והובלתי השקות מוצרים מוצלחות",
      icon: <TrendingUp className="w-8 h-8" />,
      gradient: "from-green-400 to-emerald-400",
      stats: ["₪100M+ מכירות", "9 שנות ניסיון", "3 שווקים"]
    },
    {
      title: "300+ אנשי מכירות הוכשרו",
      metric: "הדרכות FSM ברחבי הארץ",
      description: "פיתחתי תוכניות הכשרה מקצועיות ויצרתי חומרי הדרכה איכותיים",
      icon: <Users className="w-8 h-8" />,
      gradient: "from-orange-400 to-red-400",
      stats: ["300+ מוכשרים", "50+ חנויות", "5 רשתות ראשיות"]
    },
    {
      title: "מומחיות בטכנולוגיות AI",
      metric: "שימוש יומיומי בכלי מתקדמים",
      description: "אני משתמש בכלי GenAI מתקדמים לאופטימיזציה של תהליכי עבודה",
      icon: <Brain className="w-8 h-8" />,
      gradient: "from-purple-400 to-pink-400",
      stats: ["GPT Expert", "Claude Pro", "Midjourney Pro"]
    }
  ], []);

  // Event handlers
  const toggleSection = useCallback((section) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  }, []);

  const handleContactSubmit = useCallback(async (e) => {
    e.preventDefault();
    if (!contactForm.name || !contactForm.email || !contactForm.message) {
      setFormError('אנא מלא את כל השדות המסומנים *');
      return;
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(contactForm.email)) {
      setFormError('אנא הזן כתובת אימייל תקינה');
      return;
    }

    setFormError('');

    setIsSubmitting(true);
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    setSubmitSuccess(true);
    setContactForm({ name: '', email: '', phone: '', message: '', company: '' });
    setIsSubmitting(false);
    setFormError('');

    setTimeout(() => {
      setShowContactForm(false);
      setSubmitSuccess(false);
    }, 3000);
  }, [contactForm]);

  const scrollToSection = useCallback((sectionId) => {
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }, []);

  const handleWhatsApp = useCallback(() => {
    const message = encodeURIComponent(`שלום תם! ראיתי את עמוד הקו"ח המרשים שלך ואני מעוניין לשוחח איתך לגבי הזדמנויות עבודה.`);
    window.open(`https://wa.me/972587757705?text=${message}`, '_blank');
  }, []);

  const handlePhoneCall = useCallback(() => {
    window.open('tel:+972587757705');
  }, []);

  const handleLinkedIn = useCallback(() => {
    window.open('https://www.linkedin.com/in/tom-drachman/', '_blank');
  }, []);

  const handleCalendly = useCallback(() => {
    window.open('https://calendly.com/tomdrach/meeting', '_blank');
  }, []);

  return (
    <div 
      className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900 text-white font-sans relative overflow-x-hidden"
      dir="rtl"
      style={{
        fontFamily: '"Inter", "Segoe UI", "Roboto", system-ui, -apple-system, sans-serif',
        letterSpacing: '-0.01em'
      }}
    >
      {/* Enhanced scroll progress indicator */}
      <div className="fixed top-0 left-0 right-0 z-50">
        <div 
          className="h-1 bg-gradient-to-r from-blue-500 via-purple-500 to-cyan-500 transition-all duration-300 shadow-lg"
          style={{ width: `${Math.min(scrollProgress, 100)}%` }}
        />
      </div>

      {/* Enhanced mouse follower */}
      <MouseFollower mousePosition={mousePosition} />

      {/* Enhanced navigation dots */}
      <div className="fixed left-8 top-1/2 -translate-y-1/2 z-40 hidden lg:flex flex-col gap-4">
        {[
          { id: 'hero', icon: <Home className="w-4 h-4" /> },
          { id: 'profile', icon: <User className="w-4 h-4" /> },
          { id: 'achievements', icon: <Award className="w-4 h-4" /> },
          { id: 'experience', icon: <Briefcase className="w-4 h-4" /> },
          { id: 'skills', icon: <Cpu className="w-4 h-4" /> },
          { id: 'languages', icon: <Languages className="w-4 h-4" /> }
        ].map((section) => (
          <button
            key={section.id}
            onClick={() => scrollToSection(section.id)}
            className={`group relative p-3 rounded-xl transition-all duration-300 ${
              activeSection === section.id 
                ? 'bg-blue-500/80 scale-110 shadow-lg' 
                : 'bg-white/10 hover:bg-white/20 hover:scale-105'
            }`}
            title={section.id}
          >
            <div className={`transition-colors ${
              activeSection === section.id ? 'text-white' : 'text-gray-300 group-hover:text-white'
            }`}>
              {section.icon}
            </div>
            {activeSection === section.id && (
              <div className="absolute -right-3 top-1/2 -translate-y-1/2 w-2 h-8 bg-blue-400 rounded-l-full" />
            )}
          </button>
        ))}
      </div>

      {/* Mobile navigation menu */}
      <div className="fixed top-4 left-4 z-50 lg:hidden">
        <button
          onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
          className="w-12 h-12 bg-white/20 backdrop-blur-xl rounded-xl flex items-center justify-center text-white border border-white/30"
        >
          {mobileMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
        </button>
      </div>

      {/* Mobile menu overlay */}
      {mobileMenuOpen && (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-40 lg:hidden">
          <div className="bg-slate-800/95 backdrop-blur-xl w-80 h-full shadow-2xl border-l border-white/20 mr-auto">
            <div className="p-6 pt-20">
              <h3 className="text-xl font-bold text-white mb-6">ניווט</h3>
              <div className="space-y-3">
                {[
                  { id: 'hero', label: 'דף בית', icon: <Home className="w-5 h-5" /> },
                  { id: 'profile', label: 'פרופיל', icon: <User className="w-5 h-5" /> },
                  { id: 'achievements', label: 'הישגים', icon: <Award className="w-5 h-5" /> },
                  { id: 'experience', label: 'ניסיון', icon: <Briefcase className="w-5 h-5" /> },
                  { id: 'skills', label: 'כישורים', icon: <Cpu className="w-5 h-5" /> },
                  { id: 'languages', label: 'שפות', icon: <Languages className="w-5 h-5" /> }
                ].map((section) => (
                  <button
                    key={section.id}
                    onClick={() => {
                      scrollToSection(section.id);
                      setMobileMenuOpen(false);
                    }}
                    className="w-full flex items-center gap-3 p-3 rounded-xl text-right hover:bg-white/10 transition-colors text-gray-300 hover:text-white"
                  >
                    {section.icon}
                    <span>{section.label}</span>
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Hero Section - Enhanced */}
      <AnimatedSection id="hero" className="relative min-h-screen flex items-center">
        <FloatingParticles count={20} />
        
        <div className="absolute inset-0 bg-gradient-to-br from-slate-900/90 via-blue-900/90 to-indigo-900/90" />
        
        {/* Enhanced animated background grid */}
        <div className="absolute inset-0 opacity-10">
          <div className="grid grid-cols-12 gap-4 h-full">
            {Array.from({ length: 12 }).map((_, i) => (
              <div
                key={i}
                className="bg-gradient-to-b from-transparent via-white/10 to-transparent"
                style={{
                  animation: `pulse ${3 + i * 0.2}s ease-in-out infinite`,
                  animationDelay: `${i * 0.1}s`
                }}
              />
            ))}
          </div>
        </div>

        <div className="relative z-10 container mx-auto px-4 sm:px-6 py-20">
          <div className="max-w-7xl mx-auto">
            <div className="grid lg:grid-cols-2 gap-16 items-center">
              {/* Avatar section - Enhanced */}
              <div className="flex flex-col items-center lg:items-start">
                <div className="relative mb-8 group">
                  <div className="w-48 h-48 lg:w-64 lg:h-64 rounded-3xl bg-gradient-to-br from-blue-400 via-indigo-500 to-purple-600 flex items-center justify-center text-6xl lg:text-7xl font-black shadow-2xl relative overflow-hidden transition-transform duration-500 group-hover:scale-105">
                    <span className="relative z-10 text-white">TD</span>
                    
                    {/* Animated background overlay */}
                    <div className="absolute inset-0 bg-gradient-to-br from-cyan-400/30 to-blue-500/30 animate-pulse" />
                    
                    {/* Hover effect */}
                    <div className="absolute inset-0 bg-gradient-to-br from-white/0 via-white/20 to-white/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
                  </div>
                  
                  {/* Enhanced rotating border */}
                  <div className="absolute -inset-4 rounded-3xl border-2 border-blue-400/30 animate-spin-slow" />
                  
                  {/* Status indicator */}
                  <div className="absolute -bottom-2 -right-2 bg-green-500 w-8 h-8 rounded-full border-4 border-white/20 flex items-center justify-center animate-pulse">
                    <div className="w-3 h-3 bg-white rounded-full" />
                  </div>
                </div>

                {/* Enhanced quick stats */}
                <div className="grid grid-cols-2 gap-4 w-full max-w-sm">
                  {[
                    { number: "9+", label: "שנות ניסיון", color: "from-blue-400 to-cyan-400", icon: <Clock className="w-5 h-5" /> },
                    { number: "3", label: "מוצרים", color: "from-green-400 to-emerald-400", icon: <Rocket className="w-5 h-5" /> },
                    { number: "300+", label: "הוכשרו", color: "from-purple-400 to-pink-400", icon: <Users className="w-5 h-5" /> },
                    { number: "₪100M", label: "מכירות", color: "from-yellow-400 to-orange-400", icon: <DollarSign className="w-5 h-5" /> }
                  ].map((stat, index) => (
                    <div
                      key={index}
                      className="bg-white/10 backdrop-blur-xl rounded-2xl p-4 border border-white/20 text-center group hover:bg-white/20 transition-all duration-300 hover:-translate-y-1"
                      style={{ animationDelay: `${index * 0.1}s` }}
                    >
                      <div className={`w-8 h-8 bg-gradient-to-br ${stat.color} rounded-lg mx-auto mb-2 flex items-center justify-center text-white text-sm group-hover:scale-110 transition-transform`}>
                        {stat.icon}
                      </div>
                      <div className="text-xl font-bold text-white mb-1">{stat.number}</div>
                      <div className="text-xs text-gray-300 font-medium">{stat.label}</div>
                    </div>
                  ))}
                </div>
              </div>
              
              {/* Content section - Enhanced */}
              <div className="text-center lg:text-right space-y-8">
                <div>
                  <h1 className="text-5xl sm:text-6xl lg:text-7xl xl:text-8xl font-black mb-4 bg-gradient-to-l from-white via-blue-200 to-cyan-300 bg-clip-text text-transparent leading-tight animate-fade-in">
                    תם דרכמן
                  </h1>
                  <div className="text-2xl sm:text-3xl lg:text-4xl text-blue-200/80 font-light mb-2 animate-fade-in" style={{ animationDelay: '0.2s' }}>
                    Tom Drachman
                  </div>
                </div>

                <div className="space-y-4 animate-fade-in" style={{ animationDelay: '0.4s' }}>
                  <h2 className="text-2xl sm:text-3xl lg:text-4xl font-bold text-transparent bg-gradient-to-l from-blue-200 via-indigo-200 to-purple-200 bg-clip-text leading-tight">
                    מוביל שיווק מוצר ואסטרטגיית GTM
                  </h2>
                  <div className="flex items-center justify-center lg:justify-end gap-3">
                    <Sparkles className="w-6 h-6 text-cyan-300 animate-pulse" />
                    <span className="text-xl text-cyan-300 font-medium">מומחה בחוויות מבוססות AI</span>
                  </div>
                </div>
                
                {/* Enhanced contact pills */}
                <div className="flex flex-wrap justify-center lg:justify-end gap-3 animate-fade-in" style={{ animationDelay: '0.6s' }}>
                  {[
                    { icon: <MapPin className="w-4 h-4" />, text: "תל אביב", color: "from-emerald-500/20 to-green-500/20" },
                    { icon: <Phone className="w-4 h-4" />, text: "058-775-7705", color: "from-blue-500/20 to-cyan-500/20" },
                    { icon: <Mail className="w-4 h-4" />, text: "tomdrach@gmail.com", color: "from-purple-500/20 to-pink-500/20" },
                    { icon: <Globe className="w-4 h-4" />, text: "askavi.co.il", color: "from-orange-500/20 to-red-500/20" }
                  ].map((contact, index) => (
                    <div
                      key={index}
                      className={`flex items-center gap-2 bg-gradient-to-r ${contact.color} backdrop-blur-xl rounded-full px-4 py-2 border border-white/20 text-sm font-medium hover:scale-105 transition-transform cursor-default`}
                    >
                      {contact.icon}
                      {contact.text}
                    </div>
                  ))}
                </div>

                {/* Enhanced CTA buttons */}
                <div className="flex flex-col sm:flex-row gap-4 justify-center lg:justify-end animate-fade-in" style={{ animationDelay: '0.8s' }}>
                  <GradientButton 
                    onClick={() => setShowContactForm(true)}
                    variant="primary"
                    size="lg"
                  >
                    <MessageSquare className="w-5 h-5" />
                    בואו נדבר
                    <ArrowUpRight className="w-4 h-4 group-hover:translate-x-[-2px] group-hover:translate-y-[-2px] transition-transform" />
                  </GradientButton>
                  
                  <GradientButton 
                    onClick={handleWhatsApp}
                    variant="success"
                    size="lg"
                  >
                    <MessageCircle className="w-5 h-5" />
                    וואטסאפ
                  </GradientButton>
                  
                  <GradientButton 
                    onClick={handleLinkedIn}
                    variant="secondary"
                    size="lg"
                  >
                    <Linkedin className="w-5 h-5" />
                    LinkedIn
                  </GradientButton>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Scroll indicator */}
        <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce">
          <ChevronDown className="w-8 h-8 text-white/60" />
        </div>
      </AnimatedSection>

      <div className="container mx-auto px-4 sm:px-6 max-w-7xl">
        
        {/* Professional Summary - Enhanced */}
        <AnimatedSection id="profile" className="py-32">
          <div className="text-center mb-16">
            <h2 className="text-4xl sm:text-5xl lg:text-6xl font-black mb-6 bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent">
              פרופיל מקצועי
            </h2>
            <div className="w-24 h-1 bg-gradient-to-r from-blue-500 to-purple-500 mx-auto rounded-full" />
          </div>
          
          <div className="max-w-6xl mx-auto">
            <div className="bg-gradient-to-br from-white/5 via-white/10 to-white/5 backdrop-blur-2xl border border-white/20 rounded-3xl p-8 sm:p-12 shadow-2xl relative overflow-hidden group">
              
              {/* Enhanced animated background pattern */}
              <div className="absolute inset-0 opacity-5">
                <div className="w-full h-full bg-gradient-to-br from-blue-500 to-purple-500 animate-gradient-x" />
              </div>
              
              <div className="relative z-10 space-y-8">
                <p className="text-xl sm:text-2xl leading-relaxed text-gray-100 font-light text-center" style={{ lineHeight: 1.7 }}>
                  מוביל שיווק מוצר עם <span className="font-semibold text-blue-300">9+ שנות ניסיון</span> בהובלת אסטרטגיות Go-To-Market, ניהול ערוצי מכירה ופיתוח מוצרים טכנולוגיים חדשניים. מתמחה בתרגום יכולות טכניות מורכבות לסיפורי מוצר פשוטים ומשכנעים שמניעים לפעולה.
                </p>
                
                <p className="text-lg sm:text-xl leading-relaxed text-gray-200 text-center" style={{ lineHeight: 1.7 }}>
                  שילוב ייחודי של <span className="text-blue-300 font-semibold">חשיבת Builder</span> עם יכולות <span className="text-purple-300 font-semibold">Marketer</span> מתקדמות. הוביל בהצלחה השקות מוצרים, צמיחה אורגנית ובניית קהילות משתמשים מעורבות. מאמין בכוח הנתונים ובטכנולוגיות AI כמנועי צמיחה עסקית.
                </p>

                {/* Enhanced key metrics */}
                <div className="grid grid-cols-2 lg:grid-cols-4 gap-6 mt-12">
                  {[
                    { number: "9+", label: "שנות ניסיון", color: "from-blue-400 to-cyan-400", icon: <Clock className="w-6 h-6" /> },
                    { number: "3", label: "מוצרים הושקו", color: "from-green-400 to-emerald-400", icon: <Rocket className="w-6 h-6" /> },
                    { number: "300+", label: "אנשי מכירות הוכשרו", color: "from-purple-400 to-pink-400", icon: <Users className="w-6 h-6" /> },
                    { number: "₪100M+", label: "מכירות שנתיות", color: "from-yellow-400 to-orange-400", icon: <DollarSign className="w-6 h-6" /> }
                  ].map((stat, index) => (
                    <div
                      key={index}
                      className="bg-gradient-to-br from-white/10 to-white/5 rounded-2xl p-6 text-center border border-white/20 backdrop-blur-sm group hover:from-white/20 hover:to-white/10 transition-all duration-300 hover:-translate-y-2"
                    >
                      <div className={`w-12 h-12 bg-gradient-to-br ${stat.color} rounded-xl mx-auto mb-4 flex items-center justify-center text-white group-hover:scale-110 transition-transform`}>
                        {stat.icon}
                      </div>
                      <div className="text-3xl font-black text-white mb-2">{stat.number}</div>
                      <div className="text-sm text-gray-300 font-medium">{stat.label}</div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </AnimatedSection>

        {/* Achievements Section - Enhanced */}
        <AnimatedSection id="achievements" className="py-32">
          <div className="bg-gradient-to-br from-white/5 via-white/10 to-white/5 backdrop-blur-2xl border border-white/10 rounded-3xl overflow-hidden shadow-2xl">
            <div 
              className="cursor-pointer p-8 hover:bg-white/5 transition-all duration-300 group"
              onClick={() => toggleSection('achievements')}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-6">
                  <div className="w-16 h-16 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-2xl flex items-center justify-center shadow-lg group-hover:shadow-2xl group-hover:scale-110 transition-all duration-300">
                    <Award className="w-8 h-8 text-white" />
                  </div>
                  <h2 className="text-4xl sm:text-5xl lg:text-6xl font-black bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent">
                    הישגים מרכזיים
                  </h2>
                </div>
                <div
                  className={`p-3 rounded-full bg-white/10 hover:bg-white/20 transition-all duration-300 ${expandedSections.achievements ? 'rotate-180' : ''}`}
                >
                  <ChevronDown className="w-8 h-8 text-yellow-400" />
                </div>
              </div>
            </div>
            
            {expandedSections.achievements && (
              <div className="px-8 pb-8 animate-fade-in">
                <div className="grid md:grid-cols-2 gap-8">
                  {achievements.map((achievement, index) => (
                    <div
                      key={index}
                      className="group relative"
                      style={{ 
                        animation: `slideInUp 0.6s ease-out`,
                        animationDelay: `${index * 0.1}s`,
                        animationFillMode: 'both'
                      }}
                    >
                      <div className="bg-gradient-to-br from-white/10 via-white/5 to-white/10 backdrop-blur-xl rounded-3xl p-8 border border-white/20 h-full relative overflow-hidden hover:border-white/30 transition-all duration-500 group-hover:-translate-y-2 group-hover:shadow-2xl">
                        
                        {/* Animated background */}
                        <div className={`absolute inset-0 opacity-0 group-hover:opacity-20 bg-gradient-to-br ${achievement.gradient} transition-opacity duration-600`} />
                        
                        <div className="relative z-10">
                          <div className="flex items-start gap-6 mb-6">
                            <div className={`p-4 rounded-2xl bg-gradient-to-br ${achievement.gradient} text-white shadow-lg group-hover:shadow-2xl group-hover:scale-110 transition-all duration-300`}>
                              {achievement.icon}
                            </div>
                            <div className="flex-1">
                              <h3 className="text-2xl font-bold text-white mb-3 group-hover:text-yellow-300 transition-colors">
                                {achievement.title}
                              </h3>
                              <div className="text-lg font-semibold text-blue-300 mb-4">
                                {achievement.metric}
                              </div>
                            </div>
                          </div>
                          
                          <p className="text-gray-300 leading-relaxed text-right mb-6 group-hover:text-gray-200 transition-colors">
                            {achievement.description}
                          </p>
                          
                          {/* Enhanced stats pills */}
                          <div className="flex flex-wrap gap-2">
                            {achievement.stats.map((stat, i) => (
                              <div
                                key={i}
                                className="px-3 py-1 bg-white/10 rounded-full text-sm text-gray-300 border border-white/20 hover:scale-105 hover:bg-white/20 transition-all duration-300"
                              >
                                {stat}
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </AnimatedSection>

        {/* Experience Section - Ultra Enhanced */}
        <AnimatedSection id="experience" className="py-32">
          <div className="bg-gradient-to-br from-white/5 via-white/10 to-white/5 backdrop-blur-2xl border border-white/10 rounded-3xl overflow-hidden shadow-2xl">
            <div 
              className="cursor-pointer p-8 hover:bg-white/5 transition-all duration-300 group"
              onClick={() => toggleSection('experience')}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-6">
                  <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-blue-500 rounded-2xl flex items-center justify-center shadow-lg group-hover:shadow-2xl group-hover:scale-110 transition-all duration-300">
                    <Briefcase className="w-8 h-8 text-white" />
                  </div>
                  <h2 className="text-4xl sm:text-5xl lg:text-6xl font-black bg-gradient-to-r from-green-400 to-blue-500 bg-clip-text text-transparent">
                    ניסיון מקצועי
                  </h2>
                </div>
                <div
                  className={`p-3 rounded-full bg-white/10 hover:bg-white/20 transition-all duration-300 group-hover:scale-110 ${expandedSections.experience ? 'rotate-180' : ''}`}
                >
                  <ChevronDown className="w-8 h-8 text-green-400" />
                </div>
              </div>
            </div>
            
            {expandedSections.experience && (
              <div className="px-8 pb-8 animate-fade-in">
                <div className="space-y-16">
                  {experiences.map((exp, index) => (
                    <div
                      key={index}
                      className="relative group"
                      style={{ 
                        animation: `slideInRight 0.8s ease-out`,
                        animationDelay: `${index * 0.2}s`,
                        animationFillMode: 'both'
                      }}
                    >
                      {/* Enhanced timeline connector */}
                      {index < experiences.length - 1 && (
                        <div className="hidden md:block absolute right-8 top-20 w-0.5 h-32 bg-gradient-to-b from-blue-400 to-transparent" />
                      )}
                      
                      <div className="flex flex-col md:flex-row gap-8">
                        {/* Enhanced icon and timeline */}
                        <div className="flex flex-row md:flex-col items-center shrink-0">
                          <div className={`w-16 h-16 rounded-2xl bg-gradient-to-br ${exp.color} flex items-center justify-center text-white shadow-lg group-hover:shadow-2xl relative overflow-hidden transition-all duration-500 group-hover:scale-110`}>
                            <div className="absolute inset-0 bg-white/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
                            <span className="relative z-10">{exp.icon}</span>
                          </div>
                          <div className="md:hidden flex-1 h-0.5 bg-gradient-to-r from-blue-400 to-transparent mr-6" />
                        </div>
                        
                        {/* Enhanced content */}
                        <div className="flex-1 min-w-0">
                          <div className="bg-gradient-to-br from-white/5 via-white/10 to-white/5 backdrop-blur-xl rounded-3xl p-8 border border-white/10 hover:border-white/20 transition-all duration-500 group-hover:shadow-2xl group-hover:-translate-y-2 relative overflow-hidden">
                            
                            {/* Enhanced animated gradient overlay */}
                            <div className={`absolute inset-0 opacity-0 group-hover:opacity-10 bg-gradient-to-br ${exp.color} transition-opacity duration-600`} />
                            
                            <div className="relative z-10">
                              {/* Enhanced header */}
                              <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between mb-8 gap-4">
                                <div className="flex-1">
                                  <h3 className="text-2xl lg:text-3xl font-bold text-white mb-3 group-hover:text-blue-300 transition-colors">
                                    {exp.title}
                                  </h3>
                                  <div className="text-xl text-blue-400 font-semibold mb-2">
                                    {exp.company}
                                  </div>
                                  
                                  {/* Enhanced metrics */}
                                  {exp.metrics && (
                                    <div className="flex flex-wrap gap-2 mb-4">
                                      {Object.entries(exp.metrics).map(([key, value]) => (
                                        <div
                                          key={key}
                                          className="px-3 py-1 bg-blue-500/20 text-blue-300 rounded-full text-sm font-medium border border-blue-400/30 hover:scale-105 hover:bg-blue-500/30 transition-all duration-300"
                                        >
                                          {value}
                                        </div>
                                      ))}
                                    </div>
                                  )}
                                </div>
                                
                                <div className="bg-gradient-to-r from-blue-500/20 to-purple-500/20 text-blue-300 px-4 py-2 rounded-2xl text-sm font-bold border border-blue-400/30 self-start whitespace-nowrap backdrop-blur-sm hover:scale-105 transition-transform">
                                  {exp.period}
                                </div>
                              </div>
                              
                              <p className="text-gray-200 mb-8 leading-relaxed text-lg">
                                {exp.description}
                              </p>
                              
                              {/* Enhanced achievements grid */}
                              <div className="space-y-4 mb-8">
                                <h4 className="text-lg font-semibold text-white flex items-center gap-2 mb-4">
                                  <CheckCircle2 className="w-5 h-5 text-green-400" />
                                  הישגים ואחריות מרכזיים
                                </h4>
                                <div className="grid gap-3">
                                  {exp.achievements.slice(0, 5).map((achievement, achIndex) => (
                                    <div
                                      key={achIndex}
                                      className="flex items-start gap-3 text-gray-300 hover:text-white transition-colors p-3 rounded-xl hover:bg-white/5 group/item"
                                      style={{ 
                                        animation: `slideInRight 0.6s ease-out`,
                                        animationDelay: `${achIndex * 0.05}s`,
                                        animationFillMode: 'both'
                                      }}
                                    >
                                      <div className="w-2 h-2 bg-yellow-400 rounded-full mt-3 group-hover/item:scale-125 transition-transform" />
                                      <span className="leading-relaxed text-right flex-1">{achievement}</span>
                                    </div>
                                  ))}
                                  {exp.achievements.length > 5 && (
                                    <div className="text-center pt-2">
                                      <span className="text-blue-400 text-sm">ועוד...</span>
                                    </div>
                                  )}
                                </div>
                              </div>
                              
                              {/* Enhanced tags */}
                              <div className="flex flex-wrap gap-2">
                                {exp.tags.map((tag, tagIndex) => (
                                  <span
                                    key={tagIndex}
                                    className="px-3 py-1 bg-slate-700/50 text-slate-300 rounded-full text-xs font-medium border border-slate-600/30 hover:bg-slate-600/50 hover:text-white transition-all duration-300 hover:scale-105"
                                  >
                                    {tag}
                                  </span>
                                ))}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </AnimatedSection>

        {/* Skills Section - Ultra Enhanced */}
        <AnimatedSection id="skills" className="py-32">
          <div className="bg-gradient-to-br from-white/5 via-white/10 to-white/5 backdrop-blur-2xl border border-white/10 rounded-3xl overflow-hidden shadow-2xl">
            <div 
              className="cursor-pointer p-8 hover:bg-white/5 transition-all duration-300 group"
              onClick={() => toggleSection('skills')}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-6">
                  <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-2xl flex items-center justify-center shadow-lg group-hover:shadow-2xl group-hover:scale-110 transition-all duration-300">
                    <Award className="w-8 h-8 text-white" />
                  </div>
                  <h2 className="text-4xl sm:text-5xl lg:text-6xl font-black bg-gradient-to-r from-purple-400 to-pink-500 bg-clip-text text-transparent">
                    כישורים וכלים
                  </h2>
                </div>
                <div
                  className={`p-3 rounded-full bg-white/10 hover:bg-white/20 transition-all duration-300 group-hover:scale-110 ${expandedSections.skills ? 'rotate-180' : ''}`}
                >
                  <ChevronDown className="w-8 h-8 text-purple-400" />
                </div>
              </div>
            </div>
            
            {expandedSections.skills && (
              <div className="px-8 pb-8 space-y-12 animate-fade-in">
                {/* Core Skills */}
                <div>
                  <h3 className="text-3xl font-bold text-white mb-8 flex items-center gap-4">
                    <Zap className="w-8 h-8 text-yellow-400" />
                    יכולות ליבה
                  </h3>
                  
                  <div className="grid md:grid-cols-2 gap-8">
                    {skills.map((skillGroup, index) => (
                      <div
                        key={index}
                        className="group relative"
                        style={{ 
                          animation: `slideInUp 0.6s ease-out`,
                          animationDelay: `${index * 0.1}s`,
                          animationFillMode: 'both'
                        }}
                      >
                        <div className="bg-gradient-to-br from-white/10 via-white/5 to-white/10 backdrop-blur-xl rounded-3xl p-8 border border-white/10 hover:border-white/20 transition-all duration-500 h-full relative overflow-hidden group-hover:-translate-y-2 group-hover:shadow-2xl">
                          
                          {/* Animated background */}
                          <div className={`absolute inset-0 opacity-0 group-hover:opacity-20 bg-gradient-to-br ${skillGroup.color} transition-opacity duration-600`} />
                          
                          <div className="relative z-10">
                            <div className="flex items-center gap-4 mb-8">
                              <div className={`p-4 rounded-2xl bg-gradient-to-br ${skillGroup.color} text-white shadow-lg group-hover:shadow-2xl group-hover:scale-110 transition-all duration-300`}>
                                {skillGroup.icon}
                              </div>
                              <h4 className="text-xl font-bold text-white group-hover:text-blue-300 transition-colors">
                                {skillGroup.category}
                              </h4>
                            </div>
                            
                            <div className="grid grid-cols-1 gap-3">
                              {skillGroup.items.map((skill, skillIndex) => (
                                <div
                                  key={skillIndex}
                                  className="bg-white/10 text-gray-200 hover:text-white hover:bg-white/20 px-4 py-3 rounded-xl font-medium transition-all duration-300 border border-white/20 hover:border-white/30 group/skill cursor-default hover:scale-102 hover:translate-x-1"
                                  style={{ 
                                    animation: `slideInRight 0.4s ease-out`,
                                    animationDelay: `${skillIndex * 0.03}s`,
                                    animationFillMode: 'both'
                                  }}
                                >
                                  <div className="flex items-center justify-between">
                                    <span>{skill}</span>
                                    <div className="w-2 h-2 bg-current rounded-full opacity-0 group-hover/skill:opacity-100 transition-opacity" />
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
                
                {/* Enhanced Technical Tools */}
                <div>
                  <h3 className="text-3xl font-bold text-white mb-8 flex items-center gap-4">
                    <Settings className="w-8 h-8 text-blue-400" />
                    כלים טכנולוגיים
                  </h3>
                  
                  <div className="space-y-8">
                    {Object.entries({
                      "Marketing & Analytics": [
                        "Google Analytics 4", "Google Tag Manager", "Hotjar", "Mixpanel",
                        "Facebook Ads Manager", "Google Ads", "Mailchimp", "HubSpot", "EDI Systems"
                      ],
                      "Design & UX": [
                        "Figma", "Adobe Creative Suite", "Canva Pro", "Miro", "Whimsical"
                      ],
                      "AI & Development": [
                        "OpenAI API", "Claude API", "Midjourney", "Base44", "React", "JavaScript", "Deno"
                      ],
                      "Business Tools": [
                        "Excel Advanced", "PowerBI", "Salesforce", "Slack", "Zoom", "Calendly", "CRM Systems"
                      ]
                    }).map(([category, tools], categoryIndex) => (
                      <div 
                        key={category}
                        style={{ 
                          animation: `slideInUp 0.6s ease-out`,
                          animationDelay: `${categoryIndex * 0.1}s`,
                          animationFillMode: 'both'
                        }}
                      >
                        <h4 className="text-xl font-semibold text-blue-300 mb-6 flex items-center gap-3">
                          <div className="w-3 h-8 bg-gradient-to-b from-blue-400 to-blue-600 rounded-full hover:scale-y-125 transition-transform" />
                          {category}
                        </h4>
                        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3">
                          {tools.map((tool, index) => (
                            <div
                              key={index}
                              className="bg-slate-800/50 border border-slate-700 rounded-xl px-4 py-3 text-center hover:border-blue-500 hover:bg-slate-700/50 transition-all duration-300 group/tool cursor-default hover:scale-105 hover:-translate-y-1"
                              style={{ 
                                animation: `slideInUp 0.4s ease-out`,
                                animationDelay: `${index * 0.03}s`,
                                animationFillMode: 'both'
                              }}
                            >
                              <span className="text-slate-200 text-sm font-medium group-hover/tool:text-white transition-colors">
                                {tool}
                              </span>
                            </div>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        </AnimatedSection>

        {/* Languages Section - Enhanced */}
        <AnimatedSection id="languages" className="py-32">
          <div className="bg-gradient-to-br from-green-600/20 via-blue-600/20 to-emerald-600/20 backdrop-blur-2xl border border-green-400/30 rounded-3xl p-12 shadow-2xl relative overflow-hidden">
            <div className="flex items-center gap-6 mb-12">
              <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-blue-500 rounded-2xl flex items-center justify-center shadow-lg hover:scale-110 transition-transform duration-300">
                <Languages className="w-8 h-8 text-white" />
              </div>
              <h2 className="text-4xl sm:text-5xl lg:text-6xl font-black bg-gradient-to-r from-green-400 to-blue-500 bg-clip-text text-transparent">
                שפות
              </h2>
            </div>
            
            <div className="grid md:grid-cols-2 gap-8 max-w-3xl mx-auto">
              {[
                { language: "עברית", level: "שפת אם", proficiency: 100, color: "from-green-400 to-emerald-400" },
                { language: "אנגלית", level: "רמה גבוהה מאוד", proficiency: 95, color: "from-blue-400 to-cyan-400" }
              ].map((lang, index) => (
                <div 
                  key={index}
                  className="bg-white/10 backdrop-blur-xl rounded-3xl p-8 border border-white/20 text-center group hover:bg-white/15 transition-all duration-500 hover:-translate-y-2 hover:shadow-2xl"
                  style={{ 
                    animation: `slideInUp 0.6s ease-out`,
                    animationDelay: `${index * 0.2}s`,
                    animationFillMode: 'both'
                  }}
                >
                  <h3 className="text-2xl lg:text-3xl font-bold text-white mb-4 group-hover:text-green-300 transition-colors">
                    {lang.language}
                  </h3>
                  <div className="bg-green-500/20 text-green-300 px-6 py-3 rounded-2xl text-lg font-semibold border border-green-400/30 mb-6 hover:scale-105 transition-transform">
                    {lang.level}
                  </div>
                  <div className="w-full bg-gray-700/50 rounded-full h-3 overflow-hidden mb-4">
                    <div 
                      className={`h-full bg-gradient-to-r ${lang.color} rounded-full relative overflow-hidden transition-all duration-2000 ease-out`}
                      style={{ 
                        width: `${lang.proficiency}%`,
                        animation: `fillBar 2s ease-out ${0.5 + index * 0.2}s both`
                      }}
                    >
                      <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-shimmer" />
                    </div>
                  </div>
                  <div className="text-lg font-semibold text-gray-300">
                    {lang.proficiency}%
                  </div>
                </div>
              ))}
            </div>
          </div>
        </AnimatedSection>

        {/* Enhanced CTA Section */}
        <AnimatedSection className="py-32">
          <div className="relative bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 rounded-3xl p-16 shadow-2xl overflow-hidden group">
            <div className="absolute inset-0 bg-gradient-to-r from-blue-600/95 to-purple-600/95" />
            
            {/* Enhanced animated background patterns */}
            <div className="absolute inset-0 opacity-20">
              <div className="w-full h-full bg-gradient-to-br from-blue-500 to-purple-500 animate-gradient-x" />
            </div>
            
            <div className="relative z-10 text-center">
              <h2 className="text-4xl sm:text-5xl lg:text-6xl font-black mb-8 text-white">
                בואו ניצור משהו מדהים יחד
              </h2>
              <p className="text-xl lg:text-2xl mb-16 text-blue-100 max-w-4xl mx-auto leading-relaxed">
                מחפשים מישהו שיכול לקחת רעיון טכנולוגי ולהפוך אותו למוצר מצליח?<br />
                אשמח לשמוע על האתגר שלכם ולהראות איך אני יכול לתרום להצלחתכם
              </p>
              
              {/* Enhanced CTA Buttons */}
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-12 max-w-6xl mx-auto">
                {[
                  { onClick: () => setShowContactForm(true), icon: <MessageSquare className="w-6 h-6" />, text: "שלח הודעה", color: "bg-white text-blue-600 hover:bg-gray-100" },
                  { onClick: handleWhatsApp, icon: <MessageCircle className="w-6 h-6" />, text: "וואטסאפ", color: "bg-green-500 text-white hover:bg-green-600" },
                  { onClick: handlePhoneCall, icon: <PhoneCall className="w-6 h-6" />, text: "התקשר", color: "bg-emerald-500 text-white hover:bg-emerald-600" },
                  { onClick: handleCalendly, icon: <Calendar className="w-6 h-6" />, text: "קבע פגישה", color: "bg-purple-500 text-white hover:bg-purple-600" }
                ].map((button, index) => (
                  <button
                    key={index}
                    onClick={button.onClick}
                    className={`${button.color} px-8 py-4 rounded-2xl font-bold text-lg transition-all duration-300 flex items-center justify-center gap-3 relative overflow-hidden group/btn hover:scale-105 hover:-translate-y-1 active:scale-95`}
                  >
                    <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover/btn:translate-x-full transition-transform duration-700" />
                    <span className="relative z-10">{button.icon}</span>
                    <span className="relative z-10">{button.text}</span>
                  </button>
                ))}
              </div>

              {/* Secondary buttons */}
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <GradientButton 
                  onClick={handleLinkedIn}
                  variant="outline"
                  size="lg"
                >
                  <Linkedin className="w-6 h-6" />
                  LinkedIn שלי
                </GradientButton>
                <GradientButton 
                  onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
                  variant="outline"
                  size="lg"
                >
                  <Rocket className="w-6 h-6" />
                  חזור למעלה
                </GradientButton>
              </div>
            </div>
          </div>
        </AnimatedSection>

        {/* Floating Action Buttons - Enhanced */}
        <div className="fixed bottom-8 right-8 flex flex-col gap-4 z-40 lg:hidden">
          <button
            onClick={handleWhatsApp}
            className="w-16 h-16 bg-green-500 hover:bg-green-600 rounded-full flex items-center justify-center text-white shadow-2xl hover:scale-110 active:scale-95 transition-all duration-300"
          >
            <MessageCircle className="w-8 h-8" />
          </button>
          
          <button
            onClick={handlePhoneCall}
            className="w-16 h-16 bg-blue-500 hover:bg-blue-600 rounded-full flex items-center justify-center text-white shadow-2xl hover:scale-110 active:scale-95 transition-all duration-300"
          >
            <PhoneCall className="w-8 h-8" />
          </button>
        </div>

        {/* Enhanced Success Notification */}
        {submitSuccess && (
          <div className="fixed top-8 left-8 bg-green-500 text-white px-8 py-4 rounded-2xl shadow-2xl z-50 flex items-center gap-4 animate-slide-in-right">
            <div className="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center animate-checkmark">
              ✓
            </div>
            <span className="font-semibold">ההודעה נשלחה בהצלחה!</span>
          </div>
        )}

        {/* Enhanced Contact Form Modal */}
        {showContactForm && (
          <div
            className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 p-4 animate-fade-in"
            onClick={() => setShowContactForm(false)}
          >
            <div
              className="bg-slate-800 border border-slate-700 rounded-3xl shadow-2xl max-w-lg w-full max-h-[95vh] overflow-y-auto relative animate-modal-in"
              onClick={(e) => e.stopPropagation()}
              dir="rtl"
            >
              {/* Enhanced animated background */}
              <div className="absolute inset-0 bg-gradient-to-br from-blue-600/20 to-purple-600/20 rounded-3xl animate-gradient-x" />
              
              {submitSuccess ? (
                <div className="text-center p-12 relative z-10">
                  <div className="w-32 h-32 bg-green-100/20 text-green-400 rounded-full flex items-center justify-center mx-auto mb-8 animate-success-bounce">
                    <div className="text-4xl font-bold animate-checkmark-delayed">
                      ✓
                    </div>
                  </div>
                  <h3 className="text-4xl font-black text-white mb-6">תודה רבה!</h3>
                  <p className="text-xl text-slate-300 leading-relaxed">
                    ההודעה נשלחה בהצלחה.<br />
                    אחזור אליך תוך 24 שעות!
                  </p>
                </div>
              ) : (
                <div className="p-8 relative z-10">
                  <div className="flex items-center justify-between mb-8">
                    <h3 className="text-3xl font-black text-white">בואו נתחיל לעבוד יחד</h3>
                    <button 
                      onClick={() => setShowContactForm(false)}
                      className="text-gray-400 hover:text-white text-3xl w-12 h-12 flex items-center justify-center rounded-full hover:bg-slate-700/50 transition-all duration-300 hover:scale-110 hover:rotate-90"
                    >
                      ×
                    </button>
                  </div>
                  
                  <form onSubmit={handleContactSubmit} className="space-y-6">
                    {[
                      { label: "שם מלא *", type: "text", key: "name", placeholder: "הכנס את שמך המלא" },
                      { label: "אימייל *", type: "email", key: "email", placeholder: "your@email.com", dir: "ltr" },
                      { label: "טלפון", type: "tel", key: "phone", placeholder: "05X-XXXXXXX", dir: "ltr" },
                      { label: "חברה", type: "text", key: "company", placeholder: "שם החברה שלך" }
                    ].map((field, index) => (
                      <div
                        key={field.key}
                        style={{ 
                          animation: `slideInRight 0.4s ease-out`,
                          animationDelay: `${index * 0.1}s`,
                          animationFillMode: 'both'
                        }}
                      >
                        <label className="block text-sm font-semibold text-slate-300 mb-3 text-right">
                          {field.label}
                        </label>
                        <input
                          type={field.type}
                          required={field.label.includes('*')}
                          value={contactForm[field.key]}
                          onChange={(e) => {
                            setContactForm({ ...contactForm, [field.key]: e.target.value });
                            if (formError) setFormError('');
                          }}
                          className="w-full px-4 py-4 text-white bg-slate-700/50 border-2 border-slate-600/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-slate-700 transition-all duration-300 placeholder-slate-400 hover:border-slate-500/70 focus:scale-102"
                          placeholder={field.placeholder}
                          dir={field.dir || "rtl"}
                        />
                      </div>
                    ))}
                    
                    <div
                      style={{ 
                        animation: `slideInRight 0.4s ease-out`,
                        animationDelay: `0.4s`,
                        animationFillMode: 'both'
                      }}
                    >
                      <label className="block text-sm font-semibold text-slate-300 mb-3 text-right">
                        הודעה *
                      </label>
                      <textarea
                        required
                        rows={4}
                        value={contactForm.message}
                        onChange={(e) => {
                          setContactForm({ ...contactForm, message: e.target.value });
                          if (formError) setFormError('');
                        }}
                        className="w-full px-4 py-4 text-white bg-slate-700/50 border-2 border-slate-600/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-slate-700 transition-all duration-300 placeholder-slate-400 resize-none hover:border-slate-500/70 focus:scale-102"
                        placeholder="ספר לי על הפרויקט או התפקיד שמעניין אותך..."
                      />
                    </div>

                    {formError && (
                      <p className="text-red-400 text-center mb-4">{formError}</p>
                    )}

                    <GradientButton
                      type="submit"
                      disabled={isSubmitting || !contactForm.name || !contactForm.email || !contactForm.message}
                      variant="primary"
                      size="xl"
                      className="w-full"
                    >
                      {isSubmitting ? (
                        <>
                          <LoadingSpinner />
                          שולח הודעה...
                        </>
                      ) : (
                        <>
                          <Send className="w-6 h-6" />
                          שלח הודעה
                        </>
                      )}
                    </GradientButton>
                  </form>
                </div>
              )}
            </div>
          </div>
        )}
      </div>

      {/* Enhanced CSS Animations */}
      <style jsx>{`
        @keyframes slideInUp {
          from {
            opacity: 0;
            transform: translateY(30px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        @keyframes slideInRight {
          from {
            opacity: 0;
            transform: translateX(30px);
          }
          to {
            opacity: 1;
            transform: translateX(0);
          }
        }
        
        @keyframes slideInLeft {
          from {
            opacity: 0;
            transform: translateX(-30px);
          }
          to {
            opacity: 1;
            transform: translateX(0);
          }
        }
        
        @keyframes fade-in {
          from {
            opacity: 0;
          }
          to {
            opacity: 1;
          }
        }
        
        @keyframes float {
          0%, 100% { transform: translateY(0px) rotate(0deg); opacity: 0.3; }
          50% { transform: translateY(-20px) rotate(180deg); opacity: 1; }
        }
        
        @keyframes pulse {
          0%, 100% { opacity: 0.1; }
          50% { opacity: 0.3; }
        }
        
        @keyframes shimmer {
          0% { transform: translateX(-100%); }
          100% { transform: translateX(100%); }
        }
        
        @keyframes gradient-x {
          0%, 100% {
            transform: translateX(0%);
          }
          50% {
            transform: translateX(-100%);
          }
        }
        
        @keyframes fillBar {
          from { width: 0%; }
          to { width: var(--target-width); }
        }
        
        @keyframes checkmark {
          0% { transform: scale(0) rotate(-180deg); }
          50% { transform: scale(1.2) rotate(-90deg); }
          100% { transform: scale(1) rotate(0deg); }
        }
        
        @keyframes checkmark-delayed {
          0%, 60% { transform: scale(0) rotate(-180deg); opacity: 0; }
          80% { transform: scale(1.2) rotate(-90deg); opacity: 1; }
          100% { transform: scale(1) rotate(0deg); opacity: 1; }
        }
        
        @keyframes success-bounce {
          0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
          40% { transform: translateY(-10px); }
          60% { transform: translateY(-5px); }
        }
        
        @keyframes modal-in {
          from { 
            opacity: 0; 
            transform: scale(0.8) translateY(20px); 
          }
          to { 
            opacity: 1; 
            transform: scale(1) translateY(0); 
          }
        }
        
        @keyframes slide-in-right {
          from { 
            opacity: 0; 
            transform: translateX(100%); 
          }
          to { 
            opacity: 1; 
            transform: translateX(0); 
          }
        }
        
        .animate-fade-in { animation: fade-in 0.8s ease-out both; }
        .animate-slide-in-right { animation: slide-in-right 0.5s ease-out both; }
        .animate-modal-in { animation: modal-in 0.4s ease-out both; }
        .animate-success-bounce { animation: success-bounce 0.6s ease-out both; }
        .animate-checkmark { animation: checkmark 0.6s ease-out both; }
        .animate-checkmark-delayed { animation: checkmark-delayed 1s ease-out both; }
        .animate-shimmer { animation: shimmer 2s linear infinite; }
        .animate-gradient-x { animation: gradient-x 8s ease infinite; }
        .animate-spin-slow { animation: spin 15s linear infinite; }
        .hover\\:scale-102:hover { transform: scale(1.02); }
        .hover\\:translate-x-1:hover { transform: translateX(0.25rem); }
      `}</style>
    </div>
  );
}
